// <auto-generated />
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231010221941_BDV1.3")]
    partial class BDV13
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Acceso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accesos", (string)null);
                });

            modelBuilder.Entity("Entities.Aula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DocenteId")
                        .HasColumnType("int");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<int>("GradoId")
                        .HasColumnType("int");

                    b.Property<string>("Secccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("EscuelaId");

                    b.HasIndex("GradoId");

                    b.ToTable("Aulas", (string)null);
                });

            modelBuilder.Entity("Entities.CompetenciaAcademica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MateriaAcademicaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MateriaAcademicaId");

                    b.ToTable("CompetenciasAcademicas", (string)null);
                });

            modelBuilder.Entity("Entities.DimensionPsicologica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvaluacionPsicologicaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluacionPsicologicaId");

                    b.ToTable("DimensionesPsicologicas", (string)null);
                });

            modelBuilder.Entity("Entities.Docente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.ToTable("Docentes", (string)null);
                });

            modelBuilder.Entity("Entities.EscalaPsicologica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DimensionId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DimensionId");

                    b.ToTable("EscalasPsicologicas", (string)null);
                });

            modelBuilder.Entity("Entities.Escuela", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoModular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Escuelas", (string)null);
                });

            modelBuilder.Entity("Entities.Estudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoEstudiante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.ToTable("Estudiantes", (string)null);
                });

            modelBuilder.Entity("Entities.EstudianteAula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<int>("AulaId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.HasIndex("EstudianteId");

                    b.ToTable("EstudiantesAulas", (string)null);
                });

            modelBuilder.Entity("Entities.EvaluacionCompetenciaEstudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AulaId")
                        .HasColumnType("int");

                    b.Property<int>("CompetenciaAcademicaId")
                        .HasColumnType("int");

                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnidadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.HasIndex("CompetenciaAcademicaId");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("UnidadId");

                    b.ToTable("EvaluacionesCompetenciasEstudiante", (string)null);
                });

            modelBuilder.Entity("Entities.EvaluacionPsicologica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantPreguntas")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EvaluacionesPsicologicas", (string)null);
                });

            modelBuilder.Entity("Entities.EvaluacionPsicologicaAula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AulaId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("(No inicio= N, En proceso = P, Finalizo= F)");

                    b.Property<int>("EvaluacionPsicologicaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnidadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.HasIndex("EvaluacionPsicologicaId");

                    b.HasIndex("UnidadId");

                    b.ToTable("EvaluacionesPsicologicasAula", (string)null);
                });

            modelBuilder.Entity("Entities.EvaluacionPsicologicaEstudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("(No inicio= N, En proceso = P, Finalizo= F)");

                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluacionAulaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("EvaluacionAulaId");

                    b.ToTable("EvaluacionesPsicologicasEstudiante", (string)null);
                });

            modelBuilder.Entity("Entities.Grado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NGrado")
                        .HasColumnType("int");

                    b.Property<int>("NivelId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NivelId");

                    b.ToTable("Grados", (string)null);
                });

            modelBuilder.Entity("Entities.GradoEvaPsicologica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaPsiId")
                        .HasColumnType("int");

                    b.Property<int>("GradoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaPsiId");

                    b.HasIndex("GradoId");

                    b.ToTable("GradosEvaPsicologicas", (string)null);
                });

            modelBuilder.Entity("Entities.IndicadorPsicologico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EscalaPsicologicaId")
                        .HasColumnType("int");

                    b.Property<string>("NombreIndicador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EscalaPsicologicaId");

                    b.ToTable("IndicadoresPsicologicos", (string)null);
                });

            modelBuilder.Entity("Entities.MateriaAcademica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MateriasAcademicas", (string)null);
                });

            modelBuilder.Entity("Entities.Nivel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NNivel")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Niveles", (string)null);
                });

            modelBuilder.Entity("Entities.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DNI")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personas", (string)null);
                });

            modelBuilder.Entity("Entities.PreguntaPsicologica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IndicadorPsicologicoId")
                        .HasColumnType("int");

                    b.Property<int>("NPregunta")
                        .HasColumnType("int");

                    b.Property<string>("Pregunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndicadorPsicologicoId");

                    b.ToTable("PreguntasPsicologicas", (string)null);
                });

            modelBuilder.Entity("Entities.RespuestaPsicologica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaPsiEstId")
                        .HasColumnType("int");

                    b.Property<int>("PreguntaPsicologicaId")
                        .HasColumnType("int");

                    b.Property<int>("Puntaje")
                        .HasColumnType("int");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EvaPsiEstId");

                    b.HasIndex("PreguntaPsicologicaId");

                    b.ToTable("RespuestasPsicologicas", (string)null);
                });

            modelBuilder.Entity("Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Entities.RolAcceso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccesoId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccesoId");

                    b.HasIndex("RolId");

                    b.ToTable("RolesAccesos", (string)null);
                });

            modelBuilder.Entity("Entities.RolUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RolesUsuarios", (string)null);
                });

            modelBuilder.Entity("Entities.Unidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Año")
                        .HasColumnType("int");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("NUnidad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EscuelaId");

                    b.ToTable("Unidades", (string)null);
                });

            modelBuilder.Entity("Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Entities.Aula", b =>
                {
                    b.HasOne("Entities.Docente", null)
                        .WithMany("Aulas")
                        .HasForeignKey("DocenteId");

                    b.HasOne("Entities.Escuela", "Escuela")
                        .WithMany("Aulas")
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Grado", "Grado")
                        .WithMany("Aulas")
                        .HasForeignKey("GradoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escuela");

                    b.Navigation("Grado");
                });

            modelBuilder.Entity("Entities.CompetenciaAcademica", b =>
                {
                    b.HasOne("Entities.MateriaAcademica", "MateriaAcademica")
                        .WithMany("CompetenciasAcademicas")
                        .HasForeignKey("MateriaAcademicaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MateriaAcademica");
                });

            modelBuilder.Entity("Entities.DimensionPsicologica", b =>
                {
                    b.HasOne("Entities.EvaluacionPsicologica", "EvaluacionPsicologica")
                        .WithMany("DimensionesPsicologicas")
                        .HasForeignKey("EvaluacionPsicologicaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EvaluacionPsicologica");
                });

            modelBuilder.Entity("Entities.Docente", b =>
                {
                    b.HasOne("Entities.Persona", "Persona")
                        .WithOne("Docente")
                        .HasForeignKey("Entities.Docente", "PersonaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Entities.EscalaPsicologica", b =>
                {
                    b.HasOne("Entities.DimensionPsicologica", "DimensionPsicologica")
                        .WithMany("EscalasPsicologicas")
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DimensionPsicologica");
                });

            modelBuilder.Entity("Entities.Estudiante", b =>
                {
                    b.HasOne("Entities.Persona", "Persona")
                        .WithOne("Estudiante")
                        .HasForeignKey("Entities.Estudiante", "PersonaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Entities.EstudianteAula", b =>
                {
                    b.HasOne("Entities.Aula", "Aula")
                        .WithMany("EstudiantesAulas")
                        .HasForeignKey("AulaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Estudiante", "Estudiante")
                        .WithMany("EstudiantesAulas")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Aula");

                    b.Navigation("Estudiante");
                });

            modelBuilder.Entity("Entities.EvaluacionCompetenciaEstudiante", b =>
                {
                    b.HasOne("Entities.Aula", "Aula")
                        .WithMany("EvaluacionesCompetenciasEstudiante")
                        .HasForeignKey("AulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.CompetenciaAcademica", "CompetenciaAcademica")
                        .WithMany("EvaluacionesCompetenciasEstudiante")
                        .HasForeignKey("CompetenciaAcademicaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Estudiante", "Estudiante")
                        .WithMany("EvaluacionesCompetenciasEstudiante")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Unidad", "Unidad")
                        .WithMany("EvaluacionesCompetenciasEstudiante")
                        .HasForeignKey("UnidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aula");

                    b.Navigation("CompetenciaAcademica");

                    b.Navigation("Estudiante");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("Entities.EvaluacionPsicologicaAula", b =>
                {
                    b.HasOne("Entities.Aula", "Aula")
                        .WithMany("EvaluacionesPsicologicasAula")
                        .HasForeignKey("AulaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.EvaluacionPsicologica", "EvaluacionPsicologica")
                        .WithMany("EvaluacionesPsicologicasAula")
                        .HasForeignKey("EvaluacionPsicologicaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Unidad", "Unidad")
                        .WithMany("EvaluacionesPsicologicasAula")
                        .HasForeignKey("UnidadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Aula");

                    b.Navigation("EvaluacionPsicologica");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("Entities.EvaluacionPsicologicaEstudiante", b =>
                {
                    b.HasOne("Entities.Estudiante", "Estudiante")
                        .WithMany("EvaluacionesEstudiante")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.EvaluacionPsicologicaAula", "EvaluacionAula")
                        .WithMany("EvaluacionesPsicologicasEstudiante")
                        .HasForeignKey("EvaluacionAulaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Estudiante");

                    b.Navigation("EvaluacionAula");
                });

            modelBuilder.Entity("Entities.Grado", b =>
                {
                    b.HasOne("Entities.Nivel", "Nivel")
                        .WithMany("Grados")
                        .HasForeignKey("NivelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Nivel");
                });

            modelBuilder.Entity("Entities.GradoEvaPsicologica", b =>
                {
                    b.HasOne("Entities.EvaluacionPsicologica", "EvaluacionPsicologica")
                        .WithMany("GradosEvaPsicologicas")
                        .HasForeignKey("EvaPsiId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Grado", "Grado")
                        .WithMany("GradosEvaPsicologicas")
                        .HasForeignKey("GradoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EvaluacionPsicologica");

                    b.Navigation("Grado");
                });

            modelBuilder.Entity("Entities.IndicadorPsicologico", b =>
                {
                    b.HasOne("Entities.EscalaPsicologica", "EscalaPsicologica")
                        .WithMany("IndicadoresPsicologicos")
                        .HasForeignKey("EscalaPsicologicaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EscalaPsicologica");
                });

            modelBuilder.Entity("Entities.PreguntaPsicologica", b =>
                {
                    b.HasOne("Entities.IndicadorPsicologico", "IndicadorPsicologico")
                        .WithMany("PreguntasPsicologicas")
                        .HasForeignKey("IndicadorPsicologicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("IndicadorPsicologico");
                });

            modelBuilder.Entity("Entities.RespuestaPsicologica", b =>
                {
                    b.HasOne("Entities.EvaluacionPsicologicaEstudiante", "EvaluacionPsicologicaEstudiante")
                        .WithMany("RespuestasPsicologicas")
                        .HasForeignKey("EvaPsiEstId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.PreguntaPsicologica", "PreguntaPsicologica")
                        .WithMany("RespuestasPsicologicas")
                        .HasForeignKey("PreguntaPsicologicaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EvaluacionPsicologicaEstudiante");

                    b.Navigation("PreguntaPsicologica");
                });

            modelBuilder.Entity("Entities.RolAcceso", b =>
                {
                    b.HasOne("Entities.Acceso", "Acceso")
                        .WithMany("RolesAccesos")
                        .HasForeignKey("AccesoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Rol", "Rol")
                        .WithMany("RolesAccesos")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Acceso");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Entities.RolUsuario", b =>
                {
                    b.HasOne("Entities.Rol", "Rol")
                        .WithMany("RolesUsuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Usuario", "Usuario")
                        .WithMany("RolesUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entities.Unidad", b =>
                {
                    b.HasOne("Entities.Escuela", "Escuela")
                        .WithMany("Unidades")
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Escuela");
                });

            modelBuilder.Entity("Entities.Usuario", b =>
                {
                    b.HasOne("Entities.Persona", "Persona")
                        .WithOne("Usuario")
                        .HasForeignKey("Entities.Usuario", "PersonaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Entities.Acceso", b =>
                {
                    b.Navigation("RolesAccesos");
                });

            modelBuilder.Entity("Entities.Aula", b =>
                {
                    b.Navigation("EstudiantesAulas");

                    b.Navigation("EvaluacionesCompetenciasEstudiante");

                    b.Navigation("EvaluacionesPsicologicasAula");
                });

            modelBuilder.Entity("Entities.CompetenciaAcademica", b =>
                {
                    b.Navigation("EvaluacionesCompetenciasEstudiante");
                });

            modelBuilder.Entity("Entities.DimensionPsicologica", b =>
                {
                    b.Navigation("EscalasPsicologicas");
                });

            modelBuilder.Entity("Entities.Docente", b =>
                {
                    b.Navigation("Aulas");
                });

            modelBuilder.Entity("Entities.EscalaPsicologica", b =>
                {
                    b.Navigation("IndicadoresPsicologicos");
                });

            modelBuilder.Entity("Entities.Escuela", b =>
                {
                    b.Navigation("Aulas");

                    b.Navigation("Unidades");
                });

            modelBuilder.Entity("Entities.Estudiante", b =>
                {
                    b.Navigation("EstudiantesAulas");

                    b.Navigation("EvaluacionesCompetenciasEstudiante");

                    b.Navigation("EvaluacionesEstudiante");
                });

            modelBuilder.Entity("Entities.EvaluacionPsicologica", b =>
                {
                    b.Navigation("DimensionesPsicologicas");

                    b.Navigation("EvaluacionesPsicologicasAula");

                    b.Navigation("GradosEvaPsicologicas");
                });

            modelBuilder.Entity("Entities.EvaluacionPsicologicaAula", b =>
                {
                    b.Navigation("EvaluacionesPsicologicasEstudiante");
                });

            modelBuilder.Entity("Entities.EvaluacionPsicologicaEstudiante", b =>
                {
                    b.Navigation("RespuestasPsicologicas");
                });

            modelBuilder.Entity("Entities.Grado", b =>
                {
                    b.Navigation("Aulas");

                    b.Navigation("GradosEvaPsicologicas");
                });

            modelBuilder.Entity("Entities.IndicadorPsicologico", b =>
                {
                    b.Navigation("PreguntasPsicologicas");
                });

            modelBuilder.Entity("Entities.MateriaAcademica", b =>
                {
                    b.Navigation("CompetenciasAcademicas");
                });

            modelBuilder.Entity("Entities.Nivel", b =>
                {
                    b.Navigation("Grados");
                });

            modelBuilder.Entity("Entities.Persona", b =>
                {
                    b.Navigation("Docente");

                    b.Navigation("Estudiante");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entities.PreguntaPsicologica", b =>
                {
                    b.Navigation("RespuestasPsicologicas");
                });

            modelBuilder.Entity("Entities.Rol", b =>
                {
                    b.Navigation("RolesAccesos");

                    b.Navigation("RolesUsuarios");
                });

            modelBuilder.Entity("Entities.Unidad", b =>
                {
                    b.Navigation("EvaluacionesCompetenciasEstudiante");

                    b.Navigation("EvaluacionesPsicologicasAula");
                });

            modelBuilder.Entity("Entities.Usuario", b =>
                {
                    b.Navigation("RolesUsuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
